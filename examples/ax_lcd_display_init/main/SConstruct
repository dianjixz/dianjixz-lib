import os

Import('env')
with open(env['PROJECT_TOOL_S']) as f:
    exec(f.read())

SRCS = Glob('src/*.c*')
INCLUDE = []
PRIVATE_INCLUDE = []
REQUIREMENTS = ['pthread', 'single_header_libs', 'ax_common_hal', 'ax_msp']
STATIC_LIB = []
DYNAMIC_LIB = []
DEFINITIONS = []
DEFINITIONS_PRIVATE = []
LDFLAGS = []
LINK_SEARCH_PATH = []
STATIC_FILES = []


# for com_dir in Glob('component/*'):
#     INCLUDE.append(ADir(str(com_dir)))
INCLUDE.append(ADir('include'))
# INCLUDE.append(ADir('component/config/ini'))
# INCLUDE.append(ADir('component/3rd/inc/appweb'))
# INCLUDE.append(ADir('component/config/json'))







LDFLAGS+=['-Wl,-rpath=/opt/m5stack/lib', '-Wl,-rpath=/usr/local/m5stack/lib', '-Wl,-rpath=/usr/local/m5stack/lib/gcc-10.3', '-Wl,-rpath=/opt/lib', '-Wl,-rpath=/opt/usr/lib', '-Wl,-rpath=./']
LDFLAGS+=['-Wl,-rpath=/opt/bin/FRTDemo/lib']
# SRCS += ['/home/nihao/w2T/axera/M5Stack_LLM_Framework/github_source/m5stack_msp/sample/common/common_vo.c', '/home/nihao/w2T/axera/M5Stack_LLM_Framework/github_source/m5stack_msp/sample/common/common_vo_pattern.c']


REQUIREMENTS += ['ax_engine', 'ax_interpreter', 'ax_sys', 'ax_vo']
REQUIREMENTS += ['ax_opal', 'ax_ae', 'ax_skel', 'ax_opal', 'ax_venc', 'ax_mipi', 'ax_ives', 'ax_ivps', 'ax_proton', 'ax_audio', 'mpr', 'tinyalsa']
REQUIREMENTS += ['ax_audio_3a','samplerate', 'ax_fdk', 'fdk-aac', 'ax_awb', 'ax_af', 'ax_nt_stream', 'ax_nt_ctrl']



# INCLUDE += [ADir('../include/opencv4')]
# static_file = []
# static_file += [AFile('../static_lib/libopencv-4.6-aarch64-none/lib/libopencv_core.a')]
# static_file += [AFile('../static_lib/libopencv-4.6-aarch64-none/lib/libittnotify.a')]
# static_file += [AFile('../static_lib/libopencv-4.6-aarch64-none/lib/liblibjpeg-turbo.a')]
# static_file += [AFile('../static_lib/libopencv-4.6-aarch64-none/lib/liblibopenjp2.a')]
# static_file += [AFile('../static_lib/libopencv-4.6-aarch64-none/lib/liblibpng.a')]
# static_file += [AFile('../static_lib/libopencv-4.6-aarch64-none/lib/liblibtiff.a')]
# static_file += [AFile('../static_lib/libopencv-4.6-aarch64-none/lib/liblibwebp.a')]
# static_file += [AFile('../static_lib/libopencv-4.6-aarch64-none/lib/libopencv_core.a')]
# static_file += [AFile('../static_lib/libopencv-4.6-aarch64-none/lib/libopencv_highgui.a')]
# static_file += [AFile('../static_lib/libopencv-4.6-aarch64-none/lib/libopencv_imgcodecs.a')]
# static_file += [AFile('../static_lib/libopencv-4.6-aarch64-none/lib/libopencv_imgproc.a')]
# static_file += [AFile('../static_lib/libopencv-4.6-aarch64-none/lib/libopencv_videoio.a')]
# static_file += [AFile('../static_lib/libopencv-4.6-aarch64-none/lib/libtegra_hal.a')]
# static_file += [AFile('../static_lib/libopencv-4.6-aarch64-none/lib/libzlib.a')]
# STATIC_LIB += static_file * 4
# STATIC_FILES += [AFile('./vo.ini')]



env['COMPONENTS'].append({'target':env['PROJECT_NAME'],
                          'SRCS':SRCS,
                          'INCLUDE':INCLUDE,
                          'PRIVATE_INCLUDE':PRIVATE_INCLUDE,
                          'REQUIREMENTS':REQUIREMENTS,
                          'STATIC_LIB':STATIC_LIB,
                          'DYNAMIC_LIB':DYNAMIC_LIB,
                          'DEFINITIONS':DEFINITIONS,
                          'DEFINITIONS_PRIVATE':DEFINITIONS_PRIVATE,
                          'LDFLAGS':LDFLAGS,
                          'LINK_SEARCH_PATH':LINK_SEARCH_PATH,
                          'STATIC_FILES':STATIC_FILES,
                          'REGISTER':'project'
                          })
