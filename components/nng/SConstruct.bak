# component2/SConscript
Import('env')
import os
with open(env['PROJECT_TOOL_S']) as f:
    exec(f.read())

if 'CONFIG_LNNG_ENABLED' in os.environ:
    check_component('nng')
    COMPONENT_PATH = os.path.join(os.environ['GIT_REPO_PATH'], 'nng')
    SRCS=[]
    INCLUDE=[]
    PRIVATE_INCLUDE=[]
    REQUIREMENTS=[]
    STATIC_LIB=[]
    DYNAMIC_LIB=[]
    DEFINITIONS=[]
    DEFINITIONS_PRIVATE=['-w']
    LDFLAGS=[]
    LINK_SEARCH_PATH=[]

    definitions = '-DNNG_ENABLE_IPV6 -DNNG_ENABLE_STATS -DNNG_HAVE_ABSTRACT_SOCKETS -DNNG_HAVE_BACKTRACE=1 -DNNG_HAVE_BUS0 -DNNG_HAVE_CLOCK_GETTIME -DNNG_HAVE_CLOCK_GETTIME_LIBC=1 -DNNG_HAVE_EPOLL=1 -DNNG_HAVE_EPOLL_CREATE1=1 -DNNG_HAVE_EVENTFD=1 -DNNG_HAVE_FLOCK=1 -DNNG_HAVE_GETENTROPY=1 -DNNG_HAVE_GETRANDOM=1 -DNNG_HAVE_INET6=1 -DNNG_HAVE_LANGINFO=1 -DNNG_HAVE_LIBATOMIC=1 -DNNG_HAVE_LIBNSL=1 -DNNG_HAVE_LOCALTIME_R=1 -DNNG_HAVE_LOCKF=1 -DNNG_HAVE_MSG_CONTROL=1 -DNNG_HAVE_PAIR0 -DNNG_HAVE_PAIR1 -DNNG_HAVE_POLL=1 -DNNG_HAVE_PTHREAD_ATFORK_PTHREAD=1 -DNNG_HAVE_PTHREAD_SETNAME_NP=1 -DNNG_HAVE_PUB0 -DNNG_HAVE_PULL0 -DNNG_HAVE_PUSH0 -DNNG_HAVE_RECVMSG=1 -DNNG_HAVE_REP0 -DNNG_HAVE_REQ0 -DNNG_HAVE_RESPONDENT0 -DNNG_HAVE_SELECT=1 -DNNG_HAVE_SEMAPHORE_PTHREAD=1 -DNNG_HAVE_SENDMSG=1 -DNNG_HAVE_SOCKETPAIR=1 -DNNG_HAVE_SOPEERCRED=1 -DNNG_HAVE_STDATOMIC=1 -DNNG_HAVE_STRCASECMP=1 -DNNG_HAVE_STRNCASECMP=1 -DNNG_HAVE_STRNLEN=1 -DNNG_HAVE_SUB0 -DNNG_HAVE_SURVEYOR0 -DNNG_HAVE_SYSLOG=1 -DNNG_HAVE_SYS_RANDOM=1 -DNNG_HAVE_UNIX_SOCKETS=1 -DNNG_HIDDEN_VISIBILITY -DNNG_LITTLE_ENDIAN=1 -DNNG_MAX_EXPIRE_THREADS=8 -DNNG_MAX_POLLER_THREADS=8 -DNNG_MAX_TASKQ_THREADS=16 -DNNG_PLATFORM_LINUX -DNNG_PLATFORM_POSIX -DNNG_POLLQ_EPOLL -DNNG_PRIVATE -DNNG_RESOLV_CONCURRENCY=4 -DNNG_STATIC_LIB -DNNG_SUPP_HTTP -DNNG_TEST_LIB -DNNG_TRANSPORT_FDC -DNNG_TRANSPORT_INPROC -DNNG_TRANSPORT_IPC -DNNG_TRANSPORT_TCP -DNNG_TRANSPORT_UDP -DNNG_TRANSPORT_WS -DNNG_USE_EVENTFD -D_GNU_SOURCE -D_POSIX_PTHREAD_SEMANTICS -D_REENTRANT -D_THREAD_SAFE'
    _SRCS = []
    
    DEFINITIONS_PRIVATE += [ define for define in definitions.split(' ') ]


    
    INCLUDE.append(os.path.join(COMPONENT_PATH, 'include'))
    INCLUDE.append(os.path.join(COMPONENT_PATH, 'src/testing'))
    PRIVATE_INCLUDE.append(os.path.join(COMPONENT_PATH, 'src'))
    



    # _SRCS += append_srcs_dir(ADir("../../github_source/nng/src/core"))
    # _SRCS += append_srcs_dir(ADir("../../github_source/nng/src/platform"))
    # _SRCS += append_srcs_dir(ADir("../../github_source/nng/src/sp"))
    # _SRCS += append_srcs_dir(ADir("../../github_source/nng/src/supplemental"))
    # _SRCS += append_srcs_dir(ADir("../../github_source/nng/src/testing"))
    # _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/*.c'))










    # DEFINITIONS_PRIVATE += ['-DNNG_LITTLE_ENDIAN=1', '-DNNG_HIDDEN_VISIBILITY']
    # DEFINITIONS_PRIVATE += ['-D_GNU_SOURCE', '-D_POSIX_PTHREAD_SEMANTICS', '-DNNG_USE_EVENTFD', '-D_THREAD_SAFE']
    # DEFINITIONS_PRIVATE += ['-DNNG_STATIC_LIB', '-DNNG_ENABLE_STATS']
    # DEFINITIONS_PRIVATE += ['-DNNG_HAVE_ABSTRACT_SOCKETS', '-DNNG_HAVE_BACKTRACE=1']
    # DEFINITIONS_PRIVATE += ['-DNNG_HAVE_CLOCK_GETTIME', '-DNNG_HAVE_EPOLL=1', '-DNNG_HAVE_EPOLL_CREATE1=1',
    #                         '-DNNG_HAVE_FLOCK', '-DNNG_HAVE_GETENTROPY=1', '-DNNG_HAVE_GETRANDOM=1',
    #                         '-DNNG_HAVE_LANGINFO=1', '-DNNG_HAVE_LIBATOMIC=1',
    #                         '-DNNG_HAVE_LIBNSL=1', '-DNNG_HAVE_LOCALTIME_R=1', '-DNNG_HAVE_LOCKF=1',
    #                         '-DNNG_HAVE_MSG_CONTROL=1', '-DNNG_RESOLV_CONCURRENCY=4']


    _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/*.c'))
    _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/core/*.c'))
    _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/sp/*.c'))

    # DEFINITIONS_PRIVATE.append('-DNNG_MAX_EXPIRE_THREADS={}'.format(os.environ['CONFIG_NNG_MAX_EXPIRE_THREADS']))
    # DEFINITIONS_PRIVATE.append('-DNNG_MAX_POLLER_THREADS={}'.format(os.environ['CONFIG_NNG_MAX_POLLER_THREADS']))
    # DEFINITIONS_PRIVATE.append('-DNNG_MAX_TASKQ_THREADS={}'.format(os.environ['CONFIG_NNG_MAX_TASKQ_THREADS']))

    if 'CONFIG_TOOLCHAIN_SYSTEM_UNIX' in os.environ:
        # DEFINITIONS_PRIVATE += ['-DNNG_PLATFORM_LINUX', '-DNNG_PLATFORM_POSIX', '-DNNG_USE_EVENTFD', '-DNNG_HAVE_ABSTRACT_SOCKETS']
        _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/platform/posix/*.c'))
    elif 'CONFIG_TOOLCHAIN_SYSTEM_WIN' in os.environ:
        # DEFINITIONS_PRIVATE += ['-DNNG_PLATFORM_WINDOWS', '-D_CRT_SECURE_NO_WARNINGS', '-D_CRT_RAND_S', '-D_WIN32_WINNT=0x0600']
        _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/platform/windows/*.c'))

    # if 'CONFIG_NNG_HAVE_BUS0' in os.environ:
    #     _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/sp/protocol/bus0/*.c'))
    # if 'CONFIG_NNG_HAVE_PAIR0' in os.environ:
    #     _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/sp/protocol/pair0/*.c'))
    # if 'CONFIG_NNG_HAVE_PAIR1' in os.environ:
    #     _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/sp/protocol/pair1/*.c'))
    # if 'CONFIG_NNG_HAVE_SURVEYOR0' in os.environ:
    #     _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/sp/protocol/survey0/*.c'))
    # if 'CONFIG_NNG_HAVE_PUBSUB0' in os.environ:
    #     _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/sp/protocol/pubsub0/*.c'))
    # if 'CONFIG_NNG_HAVE_PULLPUSH0' in os.environ:
    #     _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/sp/protocol/pipeline0/*.c'))
    # if 'CONFIG_NNG_HAVE_REPREQ0' in os.environ:
    #     _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/sp/protocol/reqrep0/*.c'))
    # if 'CONFIG_NNG_TRANSPORT_FDC' in os.environ:
    #     DEFINITIONS_PRIVATE += ['-DNNG_TRANSPORT_FDC']
    #     _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/sp/transport/socket/*.c'))
    #     DEFINITIONS_PRIVATE += ['-DNNG_HAVE_SOCKETPAIR=1']
    # if 'CONFIG_NNG_TRANSPORT_INPROC' in os.environ:
    #     DEFINITIONS_PRIVATE += ['-DNNG_TRANSPORT_INPROC']
    #     _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/sp/transport/inproc/*.c'))
    # if 'CONFIG_NNG_TRANSPORT_IPC' in os.environ:
    #     DEFINITIONS_PRIVATE += ['-DNNG_TRANSPORT_IPC']
    #     _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/sp/transport/ipc/*.c'))
    # if 'CONFIG_NNG_TRANSPORT_TCP' in os.environ:
    #     DEFINITIONS_PRIVATE += ['-DNNG_TRANSPORT_TCP']
    #     _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/sp/transport/tcp/*.c'))
    # if 'CONFIG_NNG_TRANSPORT_TLS' in os.environ:
    #     DEFINITIONS_PRIVATE += ['-DNNG_TRANSPORT_TLS']
    #     _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/sp/transport/tls/*.c'))
    #     if 'CONFIG_TLS_MBEDTLS_ENABLED' in os.environ:
    #         _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/supplemental/tls/mbedtls/*.c'))
    #     if 'CONFIG_TLS_WOLFSSL_ENABLED' in os.environ:
    #         _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/supplemental/tls/wolfssl/*.c'))

    # if 'CONFIG_NNG_TRANSPORT_UDP' in os.environ:
    #     DEFINITIONS_PRIVATE += ['-DNNG_TRANSPORT_UDP']
    #     _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/sp/transport/udp/*.c'))
    # if 'CONFIG_NNG_TRANSPORT_WS' in os.environ:
    #     DEFINITIONS_PRIVATE += ['-DNNG_TRANSPORT_WS']
    #     _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/sp/transport/ws/*.c'))
    # if 'CONFIG_NNG_SUPP_HTTP' in os.environ:
    #     DEFINITIONS_PRIVATE += ['-DNNG_SUPP_HTTP']
    #     _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/supplemental/http/*.c'))

    # if 'CONFIG_NNG_ENABLE_IPV6' in os.environ:
    #     DEFINITIONS_PRIVATE += ['-DNNG_ENABLE_IPV6', '-DNNG_HAVE_INET6=1']

    # _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/supplemental/websocket/*.c'))
    # _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/supplemental/tls/*.c'))
    # _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/supplemental/base64/*.c'))
    # _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/supplemental/sha1/*.c'))
    # _SRCS += AGlob(os.path.join(COMPONENT_PATH,'src/supplemental/util/*.c'))
    filter_file = ['posix_pollq_poll.c', 'win_', 'tools', 'test.c', 'posix_pollq_select.c']
    filter_file += ['wolfssl.c', 'mbedtls.c', 'tls_common.c', 'tls_stream.c','tls_listener.c', 'tls_dialer.c', 'tls_stream.c']
    for src in _SRCS:
        src_file = str(src)
        filter_flage = True
        for f in filter_file:
            if f in src_file:
                filter_flage = False
                break
        if filter_flage:
            SRCS.append(src)
            print(src_file)

                    

            

    env['COMPONENTS'].append({'target':os.path.basename(env['component_dir']),
                            'SRCS':SRCS,
                            'INCLUDE':INCLUDE,
                            'PRIVATE_INCLUDE':PRIVATE_INCLUDE,
                            'REQUIREMENTS':REQUIREMENTS,
                            'STATIC_LIB':STATIC_LIB,
                            'DYNAMIC_LIB':DYNAMIC_LIB,
                            'DEFINITIONS':DEFINITIONS,
                            'DEFINITIONS_PRIVATE':DEFINITIONS_PRIVATE,
                            'LDFLAGS':LDFLAGS,
                            'LINK_SEARCH_PATH':LINK_SEARCH_PATH,
                            'REGISTER':'shared' if 'CONFIG_LNNG_DYNAMIC' in os.environ else 'static'
                            })