# component/SConscript
Import("env")
import os

with open(env["PROJECT_TOOL_S"]) as f:
    exec(f.read())


if "CONFIG_NNG_ENABLED" in os.environ:
    SRCS = [AFile("test.c")]
    INCLUDE = [ADir("include")]
    PRIVATE_INCLUDE = [ADir("../../github_source/nng/src")]
    REQUIREMENTS = []
    STATIC_LIB = []
    DYNAMIC_LIB = []
    DEFINITIONS = []
    DEFINITIONS_PRIVATE = []
    LDFLAGS = []
    LINK_SEARCH_PATH = []

    # SRCS += append_srcs_dir(Adir('../../github_source/nng/src'))

    # foreach(item IN ITEMS ${ADD_SRCS})
    #     string(FIND ${item} "_test.c" found)
    #     if(found GREATER -1)
    #         list(REMOVE_ITEM ADD_SRCS "${item}")
    #     endif()
    # endforeach()
    # print(SRCS)
    PSRCS = append_srcs_dir(ADir('../../github_source/nng/src'))
    for src in PSRCS:
        if src.endswith('_test.c'):
            continue
        if 'windows' in src:
             continue
        if 'zerotier' in src:
             continue
        if 'mbedtls' in src:
             continue
        SRCS.append(src)





    DEFINITIONS_PRIVATE += [
        "-DNNG_ENABLE_STATS",
        "-DNNG_HAVE_ABSTRACT_SOCKETS",
        "-DNNG_HAVE_BACKTRACE=1",
        "-DNNG_HAVE_BUS0",
        "-DNNG_HAVE_CLOCK_GETTIME=1",
        "-DNNG_HAVE_EPOLL=1",
        "-DNNG_HAVE_EPOLL_CREATE1=1",
        "-DNNG_HAVE_EVENTFD=1",
        "-DNNG_HAVE_FLOCK=1",
        "-DNNG_HAVE_GETRANDOM=1",
        "-DNNG_HAVE_LANGINFO=1",
        "-DNNG_HAVE_LIBATOMIC=1",
        "-DNNG_HAVE_LIBNSL=1",
        "-DNNG_HAVE_LOCKF=1",
        "-DNNG_HAVE_MSG_CONTROL=1",
        "-DNNG_HAVE_PAIR0",
        "-DNNG_HAVE_PAIR1",
        "-DNNG_HAVE_PTHREAD_ATFORK_PTHREAD=1",
        "-DNNG_HAVE_PTHREAD_SETNAME_NP=1",
        "-DNNG_HAVE_PUB0",
        "-DNNG_HAVE_PULL0",
        "-DNNG_HAVE_PUSH0",
        "-DNNG_HAVE_REP0",
        "-DNNG_HAVE_REQ0",
        "-DNNG_HAVE_RESPONDENT0",
        "-DNNG_HAVE_SEMAPHORE_PTHREAD=1",
        "-DNNG_HAVE_SOPEERCRED=1",
        "-DNNG_HAVE_STDATOMIC=1",
        "-DNNG_HAVE_STRCASECMP=1",
        "-DNNG_HAVE_STRNCASECMP=1",
        "-DNNG_HAVE_STRNLEN=1",
        "-DNNG_HAVE_SUB0",
        "-DNNG_HAVE_SURVEYOR0",
        "-DNNG_HAVE_UNIX_SOCKETS=1",
        "-DNNG_HIDDEN_VISIBILITY",
        "-DNNG_MAX_EXPIRE_THREADS=8",
        "-DNNG_MAX_TASKQ_THREADS=16",
        "-DNNG_PLATFORM_LINUX",
        "-DNNG_PLATFORM_POSIX",
        "-DNNG_PRIVATE",
        "-DNNG_STATIC_LIB",
        "-DNNG_SUPP_HTTP",
        "-DNNG_TRANSPORT_INPROC",
        "-DNNG_TRANSPORT_IPC",
        "-DNNG_TRANSPORT_TCP",
        "-DNNG_TRANSPORT_TLS",
        "-DNNG_TRANSPORT_WS",
        "-DNNG_USE_EVENTFD",
        "-D_GNU_SOURCE",
        "-D_POSIX_PTHREAD_SEMANTICS",
        "-D_REENTRANT",
        "-D_THREAD_SAFE",
    ]

    env["COMPONENTS"].append(
        {
            "target": os.path.basename(env["component_dir"]),
            "SRCS": SRCS,
            "INCLUDE": INCLUDE,
            "PRIVATE_INCLUDE": PRIVATE_INCLUDE,
            "REQUIREMENTS": REQUIREMENTS,
            "STATIC_LIB": STATIC_LIB,
            "DYNAMIC_LIB": DYNAMIC_LIB,
            "DEFINITIONS": DEFINITIONS,
            "DEFINITIONS_PRIVATE": DEFINITIONS_PRIVATE,
            "LDFLAGS": LDFLAGS,
            "LINK_SEARCH_PATH": LINK_SEARCH_PATH,
            "REGISTER": "static",
        }
    )
