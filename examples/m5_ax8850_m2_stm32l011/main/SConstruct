# project_root/src/SConscript
import os
import shutil
# Import the environment from the SConstruct file
Import("env")
with open(env["PROJECT_TOOL_S"]) as f:
    exec(f.read())

try:
    it_src = str(AGlob("Core/Src/*_it.c")[0])
    shutil.move(it_src, '.')
except:
    pass

SRCS = []
ITEMIZED_SRCS = []
INCLUDE = []
PRIVATE_INCLUDE = []
REQUIREMENTS = []
STATIC_LIB = []
DYNAMIC_LIB = []
DEFINITIONS = []
DEFINITIONS_PRIVATE = []
LDFLAGS = []
LINK_SEARCH_PATH = []


ld_stript = AGlob("*.ld")[0]


DEFINITIONS += [
    "-mcpu=cortex-m0plus",
    "-std=gnu11",
    "-DUSE_HAL_DRIVER",
    "-DSTM32L011xx",
    "-DUSE_FULL_LL_DRIVER",
    "-ffunction-sections",
    "-fdata-sections",
    "-Wall",
    "-fstack-usage",
    "--specs=nano.specs",
    "-mfloat-abi=soft",
    "-mthumb",
]


LDFLAGS += [
    "-mcpu=cortex-m0plus",
    "--specs=nosys.specs",
    "-Wl,--gc-sections",
    "--specs=nano.specs",
    "-T",
    ld_stript,
    "-mfloat-abi=soft",
    "-mthumb",
    "-Wl,--start-group",
    "-lc",
    "-lm",
    "-Wl,--end-group",
]
INCLUDE.append(ADir("Core/Inc"))
INCLUDE.append(ADir("Drivers/STM32L0xx_HAL_Driver/Inc"))
INCLUDE.append(ADir("Drivers/CMSIS/Include"))
INCLUDE.append(ADir("Drivers/CMSIS/Device/ST/STM32L0xx/Include"))


# arm-none-eabi-objcopy -O ihex at32f415_example  at32f415_example.hex
# arm-none-eabi-objcopy -O binary at32f415_example at32f415_example.bin
# arm-none-eabi-size --format=berkeley at32f415_example
# 烧录：pyocd flash --pack=./ArteryTek.AT32F415_DFP.2.1.6.pack  ./at32f415_example.hex --target _at32f415rct7
# 烧录：pyocd flash --pack=dist/ArteryTek.AT32F415_DFP.2.1.6.pack  dist/at32f415_example.hex --target _at32f415rct7




SRCS += append_srcs_dir(ADir("Core"))
SRCS += append_srcs_dir(ADir("Drivers/STM32L0xx_HAL_Driver"))

ITEMIZED_SRCS.append(AFile("stm32l0xx_it.c"))


STATIC_FILES = []
env["COMPONENTS"].append(
    {
        "target": env["PROJECT_NAME"],
        "SRCS": SRCS,
        'ITEMIZED_SRCS': ITEMIZED_SRCS,
        "INCLUDE": INCLUDE,
        "PRIVATE_INCLUDE": PRIVATE_INCLUDE,
        "REQUIREMENTS": REQUIREMENTS,
        "STATIC_LIB": STATIC_LIB,
        "DYNAMIC_LIB": DYNAMIC_LIB,
        "DEFINITIONS": DEFINITIONS,
        "DEFINITIONS_PRIVATE": DEFINITIONS_PRIVATE,
        "LDFLAGS": LDFLAGS,
        "LINK_SEARCH_PATH": LINK_SEARCH_PATH,
        "STATIC_FILES": STATIC_FILES,
        "REGISTER": "project",
    }
)
