# project_root/src/SConscript
import os
# Import the environment from the SConstruct file
Import('env')
with open(env['PROJECT_TOOL_S']) as f:
    exec(f.read())

SRCS = Glob('src/*.c*')
ITEMIZED_SRCS = Glob('itemized_src/*.c*')
INCLUDE = [ADir('.')]
PRIVATE_INCLUDE = []
REQUIREMENTS = ['stm32_bsp']
STATIC_LIB = []
DYNAMIC_LIB = []
DEFINITIONS = []
DEFINITIONS_PRIVATE = []
LDFLAGS = []
LINK_SEARCH_PATH = []

LDFLAGS += ['-mcpu=cortex-m4', '--specs=nosys.specs', '-Wl,--gc-sections', '--specs=nano.specs', '-T', env['stm32g431_ld_stript'], '-mfpu=fpv4-sp-d16', '-mfloat-abi=hard', '-mthumb', '-Wl,--start-group', '-lc', '-lm', '-Wl,--end-group']

# 查看程序大小: arm-none-eabi-size --format=berkeley at32f415_example
# 编译：scons 
# 烧录：scons flash
# 调试: pyocd gdbserver -t STM32G431CBUX ; gdb-multiarch dist/stm32g431_example

for com in env['COMPONENTS']:
    if com['target'] == 'stm32_bsp':
        com['INCLUDE'] += [ADir('include')]
        break



STATIC_FILES = []
env['COMPONENTS'].append({'target':env['PROJECT_NAME'],
                          'SRCS':SRCS,
                          'ITEMIZED_SRCS':ITEMIZED_SRCS,
                          'INCLUDE':INCLUDE,
                          'PRIVATE_INCLUDE':PRIVATE_INCLUDE,
                          'REQUIREMENTS':REQUIREMENTS,
                          'STATIC_LIB':STATIC_LIB,
                          'DYNAMIC_LIB':DYNAMIC_LIB,
                          'DEFINITIONS':DEFINITIONS,
                          'DEFINITIONS_PRIVATE':DEFINITIONS_PRIVATE,
                          'LDFLAGS':LDFLAGS,
                          'LINK_SEARCH_PATH':LINK_SEARCH_PATH,
                          'STATIC_FILES':STATIC_FILES,
                          'REGISTER':'project'
                          })